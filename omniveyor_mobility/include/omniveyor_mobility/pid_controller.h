/**
 * @file pid_controller.h
 * @author Haoguang Yang (yang1510@purdue.edu)
 * @brief PID controller as a MoveBase local planner plugin.
 * @version 0.1
 * @date 2022-03-29
 * 
 * @copyright Copyright (c) 2022 Haoguang Yang
 * 
 */

#ifndef PID_CONTROLLER_H_
#define PID_CONTROLLER_H_

// abstract class from which our plugin inherits
#include <nav_core/base_local_planner.h>

#include <ros/ros.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <base_local_planner/odometry_helper_ros.h>
#include <dynamic_reconfigure/server.h>
#include <nav_core/base_local_planner.h>
#include "omniveyor_mobility/PIDControllerConfig.h"

using namespace std;

namespace pid_controller{
  /**
   * @brief PID controller as a local planner plugin for movebase. Executes the global plan as-is,
   * with optional pose interpretation by interpolating via points in the global plan.
   * 
   */
  class PIDController : public nav_core::BaseLocalPlanner{

    public:

      /**
       * @brief Construct a new PIDController object
       * 
       */
      PIDController();

      /**
       * @brief Construct a new PIDController object by passing in parameters.
       * 
       * @param name name of the plugin and its associated namespace.
       * @param tf tf2 buffer with tfListener already attached.
       * @param costmap_ros global costmap. Not used in this plugin.
       */
      PIDController(std::string name, tf2_ros::Buffer* tf,
          costmap_2d::Costmap2DROS* costmap_ros);

      /**
       * @brief Destroy the PIDController object
       * 
       */
      ~PIDController();

      /**
       * @brief Callback at a dynamic reconfigure event.
       * 
       * @param config config input
       * @param level level of the event
       */
      void reconfigureCb(PIDControllerConfig& config,uint32_t level);

      /**
       * @brief Initialize the plugin. Called during construction of the object.
       * 
       * @param name name of the plugin and its associated namespace.
       * @param tf tf2 buffer with tfListener already attached.
       * @param costmap_ros global costmap. Not used in this plugin.
       */
      void initialize(std::string name, tf2_ros::Buffer* tf,
          costmap_2d::Costmap2DROS* costmap_ros);

      /**
       * @brief Accepting the global plan, transforms and stores via points locally.
       * 
       * @param global_plan plan generated by the global planner.
       */
      void acceptPlan(const std::vector<geometry_msgs::PoseStamped>& global_plan);

      /**
       * @brief Set the Plan object. Interface with MoveBase.
       * 
       * @param global_plan plan generated by the global planner.
       * @return true if the controller has stored the global plan for control.
       * @return false if the plugin has not yet initialized.
       */
      bool setPlan(const std::vector<geometry_msgs::PoseStamped>& global_plan);

      /**
       * @brief Get the Transformed Position object, transform poses from map frame to base frame
       * and outputs 2D coordinates in base frame.
       * 
       * @param pose input of goal pose currently pursuing
       * @param x output of error in X direction of base frame.
       * @param y output of error in Y direction of base frame.
       * @param th output of error in YAW direction of base frame.
       * @return true if result is valid.
       * @return false if result is invalid (transform timed out).
       */
      bool getTransformedPosition(geometry_msgs::PoseStamped &pose, double *x,double *y, double *th);

      /**
       * @brief Calculate the controller output.
       * 
       * @param cmd_vel raw controller output.
       * @param yieldOutput whether the cmd_vel should be sent out. Sets zero command when set false.
       */
      void calculatePIDController(geometry_msgs::Twist& cmd_vel, bool yieldOutput);

      /**
       * @brief Interface with MoveBase that transmits the controller output.
       * 
       * @param cmd_vel velocity command output.
       * @return true when the function executes normally.
       * @return false when the plugin has not yet initialized.
       */
      bool computeVelocityCommands(geometry_msgs::Twist& cmd_vel);

      /**
       * @brief Determines if the final goal of the global plan has reached.
       * 
       * @return true 
       * @return false 
       */
      bool isGoalReached();

    private:
      std::string base_frame_;
      bool initialized_, goal_reached_, trackingLastGoal_;
      int plan_index_;
      bool overwrite_global_plan_orientation_;
      bool publish_look_ahead_point_;
      double lin_lookahead_, ang_lookahead_, lin_tol_, ang_tol_;
      double max_vel_lin_, max_acc_lin_, max_vel_ang_, max_acc_ang_, max_int_lin_, max_int_ang_;
      double kp_lin_, ki_lin_, kd_lin_, kp_ang_, ki_ang_, kd_ang_;
      double lastTime_;
      double intErrX_, intErrY_, intErrTh_;
      double errX_, errY_, errTh_;
      double vbX_, vbY_, vbTh_;
      double lastErrX_, lastErrY_, lastErrTh_;
      double vxLast_, vyLast_, vthLast_;
      double dt_;

      std::vector<geometry_msgs::PoseStamped> global_plan_;
      geometry_msgs::PoseStamped currentGoal_;
      base_local_planner::OdometryHelperRos *odom_helper_;
      tf2_ros::Buffer *tf_;
      ros::Publisher target_pose_pub_;

      // dynamic reconfigure
      dynamic_reconfigure::Server<PIDControllerConfig> *dsrv_;
      void reconfigureCB(PIDControllerConfig &config, uint32_t level);
  };
};

#endif